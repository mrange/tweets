<#
// ----------------------------------------------------------------------------------------------
// Copyright (c) Mårten Rånge.
// ----------------------------------------------------------------------------------------------
// This source code is subject to terms and conditions of the Microsoft Public License. A 
// copy of the license can be found in the License.html file at the root of this distribution. 
// If you cannot locate the  Microsoft Public License, please send an email to 
// dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
//  by the terms of the Microsoft Public License.
// ----------------------------------------------------------------------------------------------
// You must not remove this notice, or any other, from this software.
// ----------------------------------------------------------------------------------------------
#>

<#@ assembly    name        ="System.Core"                      #>
<#@ import      namespace   ="System.Collections.Generic"       #>
<#@ import      namespace   ="System.Linq"                      #>
<#@ import      namespace   ="System.Text.RegularExpressions"   #>

// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart

namespace <#=Namespace#>
{
    using System.Globalization;
    using System.Threading;


    static partial class Format
    {

        public static CultureInfo DefaultCulture = Thread.CurrentThread.CurrentCulture;

<#
    foreach (var fs in Model)
    {
        try
        {
            var parameters = fs.FormatString.Replace ("{{", "|").Count (x => x == '{');

            var values = Enumerable
                .Range (0, parameters)
                .Cast<object> ()
                .ToArray ()
                ;

            // Attempt to format string in order to detect errors in the format string
            var tryToFormat = string.Format (fs.FormatString, values);

#>


        public const string <#=fs.MemberName#> = @"<#=fs.FormatString#>";

        public static string <#=fs.MethodName#> (
<#
            for (var iter = 0; iter < parameters; ++iter)
            {
#>
            <#=iter > 0 ? ",   " : "    "#>object p<#=iter#>
<#
            }
#>
        )
        {
            return string.Format (
                    DefaultCulture
                ,   <#=fs.MemberName#>
<#
            for (var iter = 0; iter < parameters; ++iter)
            {
#>
                ,   p<#=iter#>
<#
            }
#>
                );
        }

<#
        }
        catch (Exception exc)
        {
#>
@@@ FAILED_TO_BUILD_CHECKED_FORMAT_STRING @@@ // <#=fs.Name#>, <#=fs.FormatString#>, <#=exc.Message#>
<#
        }

    }
#>
    }
}


<#+
    string Namespace = "CheckedFormatStrings";

    FormatDefinition[] Model = new FormatDefinition[0];

    class FormatDefinition 
    {
        public readonly string  Name            ;
        public readonly string  FormatString    ;

        public FormatDefinition (string name, string formatString)
        {
            Name            = name          ?? "<NoName>"   ;
            FormatString    = formatString  ?? ""           ;
        }

        public string MethodName
        {
            get {return Name; }
        }

        public string MemberName
        {
            get {return "FormatString_" + Name; }
        }


    }

    static FormatDefinition F (string name,  string formatString)
    {
        return new FormatDefinition (name, formatString);
    }

#>